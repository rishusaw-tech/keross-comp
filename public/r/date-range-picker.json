{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-range-picker",
  "type": "registry:component",
  "title": "Date Range Picker",
  "description": "Date range picker using react-day-picker",
  "files": [
    {
      "path": "registry/new-york/date-range-picker.tsx",
      "content": "/* eslint-disable max-lines */\r\n'use client'\r\n\r\nimport React, { type FC, useState, useEffect, useRef, JSX } from 'react'\r\nimport { Popover, PopoverContent, PopoverTrigger } from './popover'\r\nimport { Calendar } from './calendar'\r\nimport { ChevronRightIcon, ChevronLeftIcon } from '@radix-ui/react-icons' // Use these icons for the arrows in the header\r\nimport { cn } from '@/lib/utils'\r\nimport { format } from 'date-fns'\r\nimport { Button } from './button'\r\n\r\nexport interface DateRangePickerProps {\r\n  /** Click handler for applying the updates from DateRangePicker. */\r\n  onUpdate?: (values: { range: DateRange }) => void\r\n  /** Initial value for start date */\r\n  initialDateFrom?: Date | string\r\n  /** Initial value for end date */\r\n  initialDateTo?: Date | string\r\n  /** Alignment of popover */\r\n  align?: 'start' | 'center' | 'end'\r\n  /** Option for locale */\r\n  locale?: string\r\n}\r\n\r\nconst getDateAdjustedForTimezone = (dateInput: Date | string): Date => {\r\n  if (typeof dateInput === 'string') {\r\n    const parts = dateInput.split('-').map((part) => parseInt(part, 10))\r\n    const date = new Date(parts[0], parts[1] - 1, parts[2])\r\n    return date\r\n  } else {\r\n    return dateInput\r\n  }\r\n}\r\n\r\ninterface DateRange {\r\n  from: Date | undefined\r\n  to: Date | undefined\r\n}\r\n\r\n/** The DateRangePicker component allows a user to select a range of dates */\r\nexport const DateRangePicker: FC<DateRangePickerProps> & {\r\n  filePath: string\r\n} = ({\r\n  initialDateFrom = new Date(new Date().setHours(0, 0, 0, 0)),\r\n  initialDateTo,\r\n  onUpdate,\r\n  align = 'center',\r\n  locale = 'en-US'\r\n}): JSX.Element => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  const [range, setRange] = useState<DateRange>({\r\n    from: initialDateFrom\r\n      ? getDateAdjustedForTimezone(initialDateFrom)\r\n      : undefined,\r\n    to: initialDateTo\r\n      ? getDateAdjustedForTimezone(initialDateTo)\r\n      : initialDateFrom\r\n      ? getDateAdjustedForTimezone(initialDateFrom)\r\n      : undefined\r\n  })\r\n\r\n  useEffect(() => {\r\n    // This effect will be triggered when a date is selected.\r\n    // We update the state of the component using the new range.\r\n    if (onUpdate) {\r\n      onUpdate({ range })\r\n    }\r\n  }, [range, onUpdate])\r\n\r\n  return (\r\n    <Popover modal={true} open={isOpen} onOpenChange={setIsOpen}>\r\n      <PopoverTrigger asChild>\r\n        <Button size={'lg'} variant=\"secondary\" className=\"w-auto px-3 py-2\">\r\n          <div className=\"flex-grow text-left font-normal\">\r\n             \r\n            \r\n              <span>Select a date range</span>\r\n           \r\n          </div>\r\n          <div className=\"pl-1 opacity-60 -mr-2 scale-125\">\r\n            {isOpen ? <ChevronLeftIcon width={24} /> : <ChevronRightIcon width={24} />}\r\n          </div>\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent align={align} className=\"w-auto p-0\">\r\n        <Calendar\r\n          mode=\"range\"\r\n          onSelect={(value: { from?: Date, to?: Date } | undefined) => {\r\n            setRange({ from: value?.from, to: value?.to })\r\n          }}\r\n          selected={range}\r\n          numberOfMonths={2}\r\n          defaultMonth={\r\n            new Date(new Date().setMonth(new Date().getMonth() - 1))\r\n          }\r\n        />\r\n      </PopoverContent>\r\n    </Popover>\r\n  )\r\n}\r\n\r\nDateRangePicker.displayName = 'DateRangePicker'\r\nDateRangePicker.filePath =\r\n  'libs/shared/ui-kit/src/lib/date-range-picker/date-range-picker.tsx'",
      "type": "registry:ui"
    }
  ]
}