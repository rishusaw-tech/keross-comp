{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-input",
  "type": "registry:component",
  "title": "Date Input",
  "description": "Date input component",
  "files": [
    {
      "path": "registry/new-york/date-input.tsx",
      "content": "import React, { useEffect, useRef } from 'react'\r\n\r\ninterface DateInputProps {\r\n  value?: Date\r\n  onChange: (date: Date) => void\r\n}\r\n\r\ninterface DateParts {\r\n  day: number\r\n  month: number\r\n  year: number\r\n}\r\n\r\nconst DateInput: React.FC<DateInputProps> = ({ value, onChange }) => {\r\n  const [date, setDate] = React.useState<DateParts>(() => {\r\n    const d = value ? new Date(value) : new Date()\r\n    return {\r\n      day: d.getDate(),\r\n      month: d.getMonth() + 1, // JavaScript months are 0-indexed\r\n      year: d.getFullYear()\r\n    }\r\n  })\r\n\r\n  const monthRef = useRef<HTMLInputElement | null>(null)\r\n  const dayRef = useRef<HTMLInputElement | null>(null)\r\n  const yearRef = useRef<HTMLInputElement | null>(null)\r\n\r\n  useEffect(() => {\r\n    const d = value ? new Date(value) : new Date()\r\n    setDate({\r\n      day: d.getDate(),\r\n      month: d.getMonth() + 1,\r\n      year: d.getFullYear()\r\n    })\r\n  }, [value])\r\n\r\n  const validateDate = (field: keyof DateParts, value: number): boolean => {\r\n    if (\r\n      (field === 'day' && (value < 1 || value > 31)) ||\r\n      (field === 'month' && (value < 1 || value > 12)) ||\r\n      (field === 'year' && (value < 1000 || value > 9999))\r\n    ) {\r\n      return false\r\n    }\r\n\r\n    // Validate the day of the month\r\n    const newDate = { ...date, [field]: value }\r\n    const d = new Date(newDate.year, newDate.month - 1, newDate.day)\r\n    return d.getFullYear() === newDate.year &&\r\n           d.getMonth() + 1 === newDate.month &&\r\n           d.getDate() === newDate.day\r\n  }\r\n\r\n  const handleInputChange =\r\n    (field: keyof DateParts) => (e: React.ChangeEvent<HTMLInputElement>) => {\r\n      const newValue = e.target.value ? Number(e.target.value) : ''\r\n      const isValid = typeof newValue === 'number' && validateDate(field, newValue)\r\n\r\n      // If the new value is valid, update the date\r\n      const newDate = { ...date, [field]: newValue }\r\n      setDate(newDate)\r\n\r\n      // only call onChange when the entry is valid\r\n      if (isValid) {\r\n        onChange(new Date(newDate.year, newDate.month - 1, newDate.day))\r\n      }\r\n    }\r\n\r\n  const initialDate = useRef<DateParts>(date)\r\n\r\n  const handleBlur = (field: keyof DateParts) => (\r\n    e: React.FocusEvent<HTMLInputElement>\r\n  ): void => {\r\n    if (!e.target.value) {\r\n      setDate(initialDate.current)\r\n      return\r\n    }\r\n\r\n    const newValue = Number(e.target.value)\r\n    const isValid = validateDate(field, newValue)\r\n\r\n    if (!isValid) {\r\n      setDate(initialDate.current)\r\n    } else {\r\n      // If the new value is valid, update the initial value\r\n      initialDate.current = { ...date, [field]: newValue }\r\n    }\r\n  }\r\n\r\n  const handleKeyDown =\r\n    (field: keyof DateParts) => (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n      // Allow command (or control) combinations\r\n      if (e.metaKey || e.ctrlKey) {\r\n        return\r\n      }\r\n\r\n      // Prevent non-numeric characters, excluding allowed keys\r\n      if (\r\n        !/^[0-9]$/.test(e.key) &&\r\n        ![\r\n          'ArrowUp',\r\n          'ArrowDown',\r\n          'ArrowLeft',\r\n          'ArrowRight',\r\n          'Delete',\r\n          'Tab',\r\n          'Backspace',\r\n          'Enter'\r\n        ].includes(e.key)\r\n      ) {\r\n        e.preventDefault()\r\n        return\r\n      }\r\n\r\n      if (e.key === 'ArrowUp') {\r\n        e.preventDefault()\r\n        let newDate = { ...date }\r\n\r\n        if (field === 'day') {\r\n          if (date[field] === new Date(date.year, date.month, 0).getDate()) {\r\n            newDate = { ...newDate, day: 1, month: (date.month % 12) + 1 }\r\n            if (newDate.month === 1) newDate.year += 1\r\n          } else {\r\n            newDate.day += 1\r\n          }\r\n        }\r\n\r\n        if (field === 'month') {\r\n          if (date[field] === 12) {\r\n            newDate = { ...newDate, month: 1, year: date.year + 1 }\r\n          } else {\r\n            newDate.month += 1\r\n          }\r\n        }\r\n\r\n        if (field === 'year') {\r\n          newDate.year += 1\r\n        }\r\n\r\n        setDate(newDate)\r\n        onChange(new Date(newDate.year, newDate.month - 1, newDate.day))\r\n      } else if (e.key === 'ArrowDown') {\r\n        e.preventDefault()\r\n        let newDate = { ...date }\r\n\r\n        if (field === 'day') {\r\n          if (date[field] === 1) {\r\n            newDate.month -= 1\r\n            if (newDate.month === 0) {\r\n              newDate.month = 12\r\n              newDate.year -= 1\r\n            }\r\n            newDate.day = new Date(newDate.year, newDate.month, 0).getDate()\r\n          } else {\r\n            newDate.day -= 1\r\n          }\r\n        }\r\n\r\n        if (field === 'month') {\r\n          if (date[field] === 1) {\r\n            newDate = { ...newDate, month: 12, year: date.year - 1 }\r\n          } else {\r\n            newDate.month -= 1\r\n          }\r\n        }\r\n\r\n        if (field === 'year') {\r\n          newDate.year -= 1\r\n        }\r\n\r\n        setDate(newDate)\r\n        onChange(new Date(newDate.year, newDate.month - 1, newDate.day))\r\n      }\r\n\r\n      if (e.key === 'ArrowRight') {\r\n        if (\r\n          e.currentTarget.selectionStart === e.currentTarget.value.length ||\r\n          (e.currentTarget.selectionStart === 0 &&\r\n            e.currentTarget.selectionEnd === e.currentTarget.value.length)\r\n        ) {\r\n          e.preventDefault()\r\n          if (field === 'month') dayRef.current?.focus()\r\n          if (field === 'day') yearRef.current?.focus()\r\n        }\r\n      } else if (e.key === 'ArrowLeft') {\r\n        if (\r\n          e.currentTarget.selectionStart === 0 ||\r\n          (e.currentTarget.selectionStart === 0 &&\r\n            e.currentTarget.selectionEnd === e.currentTarget.value.length)\r\n        ) {\r\n          e.preventDefault()\r\n          if (field === 'day') monthRef.current?.focus()\r\n          if (field === 'year') dayRef.current?.focus()\r\n        }\r\n      }\r\n    }\r\n\r\n  return (\r\n    <div className=\"flex border rounded-lg items-center text-sm px-1\">\r\n      <input\r\n        type=\"text\"\r\n        ref={monthRef}\r\n        max={12}\r\n        maxLength={2}\r\n        value={date.month.toString()}\r\n        onChange={handleInputChange('month')}\r\n        onKeyDown={handleKeyDown('month')}\r\n        onFocus={(e) => {\r\n          if (window.innerWidth > 1024) {\r\n            e.target.select()\r\n          }\r\n        }}\r\n        onBlur={handleBlur('month')}\r\n        className=\"p-0 outline-none w-6 border-none text-center\"\r\n        placeholder=\"M\"\r\n      />\r\n      <span className=\"opacity-20 -mx-px\">/</span>\r\n      <input\r\n        type=\"text\"\r\n        ref={dayRef}\r\n        max={31}\r\n        maxLength={2}\r\n        value={date.day.toString()}\r\n        onChange={handleInputChange('day')}\r\n        onKeyDown={handleKeyDown('day')}\r\n        onFocus={(e) => {\r\n          if (window.innerWidth > 1024) {\r\n            e.target.select()\r\n          }\r\n        }}\r\n        onBlur={handleBlur('day')}\r\n        className=\"p-0 outline-none w-7 border-none text-center\"\r\n        placeholder=\"D\"\r\n      />\r\n      <span className=\"opacity-20 -mx-px\">/</span>\r\n      <input\r\n        type=\"text\"\r\n        ref={yearRef}\r\n        max={9999}\r\n        maxLength={4}\r\n        value={date.year.toString()}\r\n        onChange={handleInputChange('year')}\r\n        onKeyDown={handleKeyDown('year')}\r\n        onFocus={(e) => {\r\n          if (window.innerWidth > 1024) {\r\n            e.target.select()\r\n          }\r\n        }}\r\n        onBlur={handleBlur('year')}\r\n        className=\"p-0 outline-none w-12 border-none text-center\"\r\n        placeholder=\"YYYY\"\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nDateInput.displayName = 'DateInput'\r\n\r\nexport { DateInput }",
      "type": "registry:ui"
    }
  ]
}